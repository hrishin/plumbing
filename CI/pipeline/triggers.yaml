---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pr-check-run
  description: |
    This task will check if we really want to run the job according to the PR
    We want to do that in triggers but it's not there yet (or at least the
    version on devint).
spec:
  inputs:
    params:
      - name: PULLREQ_JSON
  steps:
    - name: pr-check-run
      image: registry.access.redhat.com/ubi8/ubi:latest
      # Should convert everything to Python instead of Shell+Python nightmare
      script: |
        #!/usr/bin/env bash
        set -eu
        echo '$(inputs.params.PULLREQ_JSON)'|tr -d '\n' | /usr/libexec/platform-python -c '
        import json
        import sys
        jeez = json.loads(sys.stdin.read())

        if jeez["action"] not in ["opened"] or not "pull_request" in jeez:
          print("State is: \"%s\", not a new pull request. canceling the pipeline....." % (jeez["action"]))
          sys.exit(1)
        '
        echo "=========== PR is good to be tested"

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pr-set-status-pending
  description: |
    This task will set the CI as running and add a link to the openshift console
    viewer url.
spec:
  inputs:
    params:
      - name: PULLREQ_JSON
  steps:
    - name: pr-set-status-pending
      env:
        - name: PR
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']

        - name: NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        - name: CONSOLE_URL
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: console-url

        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: github-token

      image: registry.access.redhat.com/ubi8/ubi:latest
      # Should convert everything to Python instead of Shell+Python nightmare
      script: |
        #!/usr/bin/env bash
        set -eu

        echo "=========== Setting PR CI status as pending"

        statusurl=$(echo '$(inputs.params.PULLREQ_JSON)'|tr -d '\n' | /usr/libexec/platform-python -c '
        import json
        import sys
        jeez = json.loads(sys.stdin.read())
        print("https://api.github.com/repos/%s/statuses/%s" % (jeez["repository"]["full_name"],
            jeez["pull_request"]["head"]["sha"]))
        ')
        #follow_url="${CONSOLE_URL}/k8s/ns/${NS}/tekton.dev~v1alpha1~PipelineRun/${PR}" # new
        follow_url="${CONSOLE_URL}/k8s/ns/${NS}/pipelineruns/${PR}" # old

        curl -f -s -o/dev/null -H "Content-Type: application/json" -H "Authorization: Bearer ${GITHUBTOKEN}" -X POST ${statusurl} -d "
        {
        \"state\": \"pending\",
        \"target_url\": \"${follow_url}\",
        \"description\": \"The build has started!\",
        \"context\": \"continuous-integration/openshift-pipelines-nightly\"
        }"

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pr-set-status-and-comment
  description: |
    This task will set the CI as stopped and add a link to the collectlogs url.
spec:
  inputs:
    params:
      - name: PULLREQ_JSON
  steps:
    - name: pr-set-status-and-comment
      env:
        - name: PR
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']

        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: github-token

      image: registry.access.redhat.com/ubi8/ubi
      script: |
        #!/usr/bin/env bash
        set -eu

        # TODO make the URL a setting
        collectlogurl="https://collectlogs-ci-openshift-pipelines.apps.devint.openshiftknativedemo.org/log/${PR}"
        statusurl=$(echo '$(inputs.params.PULLREQ_JSON)'|tr -d '\n' | /usr/libexec/platform-python -c '
        import json
        import sys
        jeez = json.loads(sys.stdin.read())
        print("https://api.github.com/repos/%s/statuses/%s" % (jeez["repository"]["full_name"],
            jeez["pull_request"]["head"]["sha"]))
        ')
        curl -f -s -o/dev/null -H "Content-Type: application/json" -H "Authorization: Bearer ${GITHUBTOKEN}" -X POST ${statusurl} -d "
        {
        \"state\": \"success\",
        \"target_url\": \"${collectlogurl}\",
        \"description\": \"CI Has finished!\",
        \"context\": \"continuous-integration/openshift-pipelines-nightly\"
        }"

        echo '$(inputs.params.PULLREQ_JSON)'|tr -d '\n' | /usr/libexec/platform-python -c "
        import http.client
        import json
        import sys
        jeez = json.loads(sys.stdin.read())
        commenturl=\"/repos/%s/issues/%d/comments\" % (jeez[\"repository\"][\"full_name\"],
            jeez[\"number\"])

        conn = http.client.HTTPSConnection(\"api.github.com\")
        data = {\"body\": \"<b>OpenShift CI</b> has successfully run :rainbow: :yum: :dancer: :100:\n* CI logs is available here: ${collectlogurl}\n* release.yaml is available here: https://osinstall.chmouel.com/release/pipeline/nightly.yaml\"}
        r = conn.request(
            \"POST\",
            commenturl,
            body=json.dumps(data),
            headers={
                \"User-Agent\": \"OpenShift CI Pipeline Commenter\",
                \"Authorization\": \"Bearer ${GITHUBTOKEN}\"
            })
        r1 = conn.getresponse()
        print(r1.read())"

        echo "=========== Closing PR"

        echo '$(inputs.params.PULLREQ_JSON)'|tr -d '\n' | /usr/libexec/platform-python -c "
        import http.client
        import json
        import sys
        jeez = json.loads(sys.stdin.read())
        commenturl=\"/repos/%s/issues/%d\" % (jeez[\"repository\"][\"full_name\"],
            jeez[\"number\"])

        data = {\"state\": \"closed\"}
        conn = http.client.HTTPSConnection(\"api.github.com\")
        r = conn.request(
            \"PATCH\",
            commenturl,
            body=json.dumps(data),
            headers={
                \"User-Agent\": \"OpenShift CI Pipeline Commenter\",
                \"Authorization\": \"Bearer ${GITHUBTOKEN}\"
            })
        r1 = conn.getresponse()
        print(r1.read())

---
apiVersion: tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: openshift-pipeline-ci-triggertemplate
spec:
  params:
    - name: pullreq_json
      description: The full JSON

    - name: namespace
      description: The namespace to create the resources

  resourcetemplates:
    - apiVersion: tekton.dev/v1alpha1
      kind: PipelineRun
      metadata:
        labels:
          generated: openshift-pipeline-ci
        name: openshift-pipeline-ci-run-$(uid)
        namespace: $(params.namespace)
      spec:
        timeout: "3h"
        serviceAccountName: %SERVICE_ACCOUNT%
        pipelineRef:
          name: openshift-pipeline-ci

        params:
          - name: UPLOADER_HOST
            value: %UPLOADER_HOST%  # TODO
          - name: IMAGE_NAME
            value: quay.io/openshift-pipeline/ci:bootstrap  # TODO
          - name: CLUSTER_NAME
            value: openshift-pipelines-install
          - name: PULLREQ_JSON
            value: $(params.pullreq_json)
        resources:
          - name: plumbing-git
            resourceRef:
              name: plumbing-git
          - name: bootstrap-image
            resourceRef:
              name: bootstrap-image
          - name: tektoncd-pipeline-git
            resourceRef:
              name: tektoncd-pipeline-git
---
apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: openshift-pipeline-ci-pipelinebinding
spec:
  params:
    - name: namespace
      value: ci-openshift-pipelines  # TODO
    - name: pullreq_json
      value: $(body)

---
apiVersion: tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: openshift-pipeline-ci
spec:
  serviceAccountName: openshift-pipeline-ci-triggers-sa
  triggers:
  - name: openshift-pipeline-ci-pipelinebindings
    binding:
      name: openshift-pipeline-ci-pipelinebinding
    template:
      name: openshift-pipeline-ci-triggertemplate

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openshift-pipeline-ci-triggers-role
rules:
- apiGroups: ["tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates", "tasks", "taskruns"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps", "services"]
  verbs: ["get", "list", "watch", "delete", "create"]
- apiGroups: ["extensions"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "delete", "create"]
- apiGroups: ["route.openshift.io"]
  resources: ["routes"]
  verbs: ["get", "list", "watch", "delete", "create", "patch"]
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openshift-pipeline-ci-triggers-binding
subjects:
- kind: ServiceAccount
  name: openshift-pipeline-ci-triggers-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openshift-pipeline-ci-triggers-role

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: openshift-pipeline-ci-triggers-sa
