---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pr-check-run
  description: |
    This task will check if we really want to run the job according to the PR
    We want to do that in triggers but it's not there yet (or at least the
    version on devint).
spec:
  inputs:
    params:
      - name: PULLREQ_JSON
  steps:
    - name: pr-check-run
      image: registry.access.redhat.com/ubi8/ubi:latest
      script: |
       #!/usr/libexec/platform-python
       import json
       import os
       import sys

       preq = """$(inputs.params.PULLREQ_JSON)"""
       if not preq:
           print("pullreq_json is not found")
           sys.exit(1)
       jeez = json.loads(preq.replace("\n", " "))
       if jeez["action"] not in ["opened"] or "pull_request" not in jeez:
           print(
               "State is: '%s', not a new pull request. canceling the pipeline....."
               % (jeez["action"]))
           sys.exit(1)
       print("PR is good to be tested.")

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pr-set-status-pending
  description: |
    This task will set the CI as running and add a link to the openshift console
    viewer url.
spec:
  inputs:
    params:
      - name: PULLREQ_JSON
  steps:
    - name: pr-set-status-pending
      env:
        - name: PR
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']

        - name: NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        - name: CONSOLE_URL
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: console-url

        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: github-token

      image: registry.access.redhat.com/ubi8/ubi:latest
      # Should convert everything to Python instead of Shell+Python nightmare
      script: |
        #!/usr/libexec/platform-python
        import json
        import os
        import http.client

        preq = """$(inputs.params.PULLREQ_JSON)"""
        jeez = json.loads(preq.replace("\n", " "))

        status_url = "/repos/%s/statuses/%s" % (jeez["repository"]["full_name"],
                                                jeez["pull_request"]["head"]["sha"])
        # OpenShift 4.2 format, 4.3 will change
        follow_url = os.environ["CONSOLE_URL"] + "/k8s/ns/" + os.environ[
            "NS"] + "/pipelineruns/" + os.environ["PR"]

        data = {
            "state": "pending",
            "target_url": follow_url,
            "description": "The build has started!",
            "context": "continuous-integration/openshift-pipelines-nightly"
        }

        conn = http.client.HTTPSConnection("api.github.com")
        r = conn.request(
            "POST",
            status_url,
            body=json.dumps(data),
            headers={
                "User-Agent": "OpenShift CI Pipeline Commenter",
                "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
        else:
          print("GIthub PR #" + os.environ["PR"] + " Status has been set")

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pr-set-status-and-comment
  description: |
    This task will set the CI as stopped and add a link to the collectlogs url.
    It will close the task at the end too (probably can be splitted).
spec:
  inputs:
    params:
      - name: PULLREQ_JSON
  steps:
    - name: pr-set-status-and-comment
      env:
        - name: PR
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']

        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: github-token

      image: registry.access.redhat.com/ubi8/ubi
      script: |
        #!/usr/libexec/platform-python
        import http.client
        import json
        import os
        import random

        COLLECT_LOGURL = 'https://collectlogs-ci-openshift-pipelines.apps.devint.openshiftknativedemo.org/'
        NIGHTLY_RELEASE_YAML = 'https://osinstall.chmouel.com/release/pipeline/nightly.yaml'

        preq = """$(inputs.params.PULLREQ_JSON)"""
        ojeez = json.loads(preq.replace("\n", " "))

        status_url = "/repos/%s/statuses/%s" % (ojeez["repository"]["full_name"],
                                                ojeez["pull_request"]["head"]["sha"])
        comment_url = "/repos/%s/issues/%d" % (ojeez["repository"]["full_name"],
                                               ojeez["number"])

        # OpenShift 4.2 format, 4.3 will change
        collect_log_url = COLLECT_LOGURL + "/log" + os.environ["PR"]

        data = {
            "state": "success",
            "target_url": collect_log_url,
            "description": "CI has finished!",
            "context": "continuous-integration/openshift-pipelines-nightly"
        }

        conn = http.client.HTTPSConnection("api.github.com")
        r = conn.request(
            "POST",
            status_url,
            body=json.dumps(data),
            headers={
                "User-Agent": "OpenShift CI Pipeline Commenter",
                "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
        else:
            print("GIthub PR #" + os.environ["PR"] +
                  " status has been set as pending!")

        GIF_KEYWORDS = "happy"
        conn = http.client.HTTPSConnection("api.giphy.com")
        r = conn.request(
            "GET",
            "/v1/gifs/search?api_key=dc6zaTOxFJmzC&q=" + GIF_KEYWORDS +
            "&rating=g&limit=100",
            body=json.dumps(data),
            headers={
                "User-Agent": "Commenter",
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())

        jeez = json.loads(resp.read().decode())
        gifurl = jeez['data'][random.randint(0, len(
            jeez['data']))]['images']['fixed_height_downsampled']['url']

        comment_message = f"""
        <b>OpenShift Pipelines CI</b> has successfully run :rainbow: :yum: :dancer: :100:

        * CI logs is available here: {collect_log_url}
        * release.yaml is available here: {NIGHTLY_RELEASE_YAML}

        ![happy gif are the best gif]({gifurl})"
        """
        conn = http.client.HTTPSConnection("api.github.com")
        data = {
            "body": comment_message,
        }
        r = conn.request(
            "POST",
            comment_url + "/comments",
            body=json.dumps(data),
            headers={
                "User-Agent": "OpenShift CI Pipeline Commenter",
                "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
            })
        r1 = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
        else:
            print("GIthub PR #" + os.environ["PR"] + " has a new result comment!")

        conn = http.client.HTTPSConnection("api.github.com")
        data = {"state": "closed"}
        r = conn.request(
            "PATCH",
            comment_url,
            body=json.dumps(data),
            headers={
                "User-Agent": "OpenShift CI Pipeline Commenter",
                "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
            })
        r1 = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
        else:
            print("GIthub PR #" + os.environ["PR"] + " has been closed!")

---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: send-slack-message
  description: |
    This will send a slack status to an URL
spec:
  inputs:
    params:
      - name: PULLREQ_JSON
  steps:
    - name: pr-set-status-and-comment
      image: registry.access.redhat.com/ubi8/ubi:latest
      env:
        - name: PR
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']

        - name: NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        - name: CONSOLE_URL
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: console-url

        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: slack-webhook-url

        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: openshift-install
              key: github-token
      script: |
        #!/usr/libexec/platform-python
        import json
        import os
        from urllib.request import Request, urlopen

        COLLECTLOG_BASE = "https://collectlogs-ci-openshift-pipelines.apps.devint.openshiftknativedemo.org"

        preq = """$(inputs.params.PULLREQ_JSON)"""
        ojeez = json.loads(preq.replace("\n", " "))
        pullreq_url = ojeez['pull_request']['html_url']
        webconsole_url = os.environ["CONSOLE_URL"] + "/k8s/ns/" + os.environ[
            "NS"] + "/pipelineruns/" + os.environ["PR"]
        collectlogs_url = COLLECTLOG_BASE + "/log/" + os.environ["PR"]
        image_url = 'https://www.inovex.de/blog/wp-content/uploads/2019/07/tekton-pipelines.png'
        pullreq_number = os.path.basename(pullreq_url)
        subject = f"OpenShift Pipeline has run succesfully from PR " \
            f"[#{pullreq_number}]({pullreq_url}) " \
            ":pipelinedance: :dancing-penguin: :hi-cat:"
        text = f"""


        • You can watch the logs on the web console: {webconsole_url}
        • Or inspect it with collectlogs: {collectlogs_url}

        """

        msg = {
            "text":
            subject,
            "attachments": [{
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": text,
                        },
                        "accessory": {
                            "type": "image",
                            "image_url": image_url,
                            "alt_text": "TektonCD CI"
                        }
                    },
                ]
            }]
        }
        req = Request(
            os.environ.get("SLACK_WEBHOOK_URL"),
            data=json.dumps(msg).encode(),
            headers={"Content-type": "application/json"},
            method="POST")
        print(urlopen(req).read().decode())
